package dao;

import java.util.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import connection.ConnectionFactory;
import model.Product;

public class ProductDAO {

	protected static final Logger LOGGER = Logger.getLogger(ProductDAO.class.getName());
	private static final String insertStatementString = "INSERT INTO Product (productID, quantity, productName, stock)"
			+ " VALUES (?,?,?,?)";
	private final static String findIDStatementString = "SELECT * FROM Product where productID = ?";
	
	private static final String findAllStatementString = "Select * FROM Product";
	
	private static final String deleteStatementString = "DELETE FROM Product WHERE productID = ?";
	
	private static final String updateStatementString = "UPDATE Product SET quantity = ?, productName = ?, stock = ? WHERE productID = ?";
	
	public static List<Product> findAll() {
		List<Product> allProducts = new ArrayList<Product>();
		
		Connection dbConnection = ConnectionFactory.getConnection();
		PreparedStatement findAllStatement = null;//object that represents a precompiled SQL statement
		ResultSet rs = null;//A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
		
		try {
			findAllStatement = dbConnection.prepareStatement(findAllStatementString);//Creates a PreparedStatement object for sending parameterized SQL statements to the database
			rs = findAllStatement.executeQuery();
			while(rs.next()) {
				int productID = rs.getInt("productID");
				int quantity = rs.getInt("quantity");
				String productName = rs.getString("productName");
				int stock = rs.getInt("stock");
				allProducts.add(new Product(productID, quantity, productName, stock));
			}
		}catch (SQLException e) {
			LOGGER.log(Level.WARNING,"ProductDAO:findAll " + e.getMessage());
		}finally {
			ConnectionFactory.close(rs);
			ConnectionFactory.close(findAllStatement);
			ConnectionFactory.close(dbConnection);
		}
		return allProducts;
	}
	
	public static Product findById(int productID) {
		Product toReturn = null;
		
		Connection dbConnection = ConnectionFactory.getConnection();
		PreparedStatement findStatement = null;
		ResultSet rs = null;
		
		try{
			findStatement = dbConnection.prepareStatement(findIDStatementString);
			findStatement.setLong(1, productID);
			rs = findStatement.executeQuery();
			rs.next();
			
			int quantity = rs.getInt("quantity");
			String productName = rs.getString("productName");
			int stock = rs.getInt("stock");
			toReturn = new Product(productID, quantity, productName, stock);
		} catch (SQLException e) {
			LOGGER.log(Level.WARNING,"ProductDAO:findById " + e.getMessage());
		}finally {
			ConnectionFactory.close(rs);
			ConnectionFactory.close(findStatement);
			ConnectionFactory.close(dbConnection);
		}
		return toReturn;
	}
	
	public static int insert(Product product) {
		Connection dbConnection = ConnectionFactory.getConnection();

		PreparedStatement insertStatement = null;
		int insertedId = -1;
		try {
			insertStatement = dbConnection.prepareStatement(insertStatementString, Statement.RETURN_GENERATED_KEYS);
			insertStatement.setInt(1, product.getProductID());
			insertStatement.setInt(2, product.getQuantity());
			insertStatement.setString(3, product.getProductName());
			insertStatement.setInt(4, product.getStock());
			insertStatement.executeUpdate();
			//Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement,
			//such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.
			ResultSet rs = insertStatement.getGeneratedKeys();
			//Retrieves any auto-generated keys created as a result of executing this Statement object. 
			//If this Statement object did not generate any keys, an empty ResultSet object is returned.
			if (rs.next()) {
				insertedId = rs.getInt(1);
			}
		} catch (SQLException e) {
			LOGGER.log(Level.WARNING, "ProductDAO:insert " + e.getMessage());
		} finally {
			ConnectionFactory.close(insertStatement);
			ConnectionFactory.close(dbConnection);
		}
		return insertedId;
	}
	
	public static void delete(int productID) {
		Connection dbConnection = ConnectionFactory.getConnection();
		PreparedStatement deleteStatement = null;
		
		try{
			deleteStatement = dbConnection.prepareStatement(deleteStatementString);
			deleteStatement.setInt(1, productID);
			deleteStatement.executeUpdate();

		}catch (SQLException e) {
			LOGGER.log(Level.WARNING,"ProductDAO:delete " + e.getMessage());
		}finally {
			ConnectionFactory.close(deleteStatement);
			ConnectionFactory.close(dbConnection);
		}
	}
	
	public static void update(int q, String name, int stock, int id) {
		Connection dbConnection = ConnectionFactory.getConnection();
		PreparedStatement updateStatement = null;

		try{
			updateStatement = dbConnection.prepareStatement(updateStatementString);
			updateStatement.setInt(1, q);
			updateStatement.setString(2, name);
			updateStatement.setInt(3, stock);
			updateStatement.setInt(4, id);
			updateStatement.executeUpdate();

		} catch (SQLException e) {
			LOGGER.log(Level.WARNING, "ProductDAO:update " + e.getMessage());
		} finally {
			ConnectionFactory.close(updateStatement);
			ConnectionFactory.close(dbConnection);
		}
	}
}
